CREATE TABLE child
	(ID_child INT IDENTITY PRIMARY KEY,
	name_surname_child VARCHAR(60) NOT NULL,
	gender VARCHAR(2) NOT NULL,
	age_child INT NOT NULL,
	ID_Employee int)

CREATE TABLE DEPARTMENT
	(ID_Department INT IDENTITY PRIMARY KEY,
	Name_Department VARCHAR(60) NOT NULL)

CREATE TABLE Employee
	(ID_Employee INT IDENTITY PRIMARY KEY,
	Name_Employee VARCHAR(60) NOT NULL,
	ID_DEPARTMENT INT,
	age_Employee INT,
	ID_personnel_records INT NOT NULL)

	CREATE TABLE POSITION
	(ID_Position INT IDENTITY PRIMARY KEY,
	Name_Position VARCHAR(60) NOT NULL)

CREATE TABLE personnel_records
	(ID_personnel_records INT IDENTITY PRIMARY KEY,
	experience int,
	salary INT,
	wage float,
	taxes int,
	ID_position int)


ALTER TABLE child
	ADD CONSTRAINT key1
	FOREIGN KEY(ID_Employee) REFERENCES Employee(ID_Employee)
	ON DELETE CASCADE;

ALTER TABLE Employee
	ADD CONSTRAINT key2
	FOREIGN KEY(ID_DEPARTMENT) REFERENCES DEPARTMENT(ID_DEPARTMENT)
	ON DELETE CASCADE;

ALTER TABLE Employee
	ADD CONSTRAINT key3
	FOREIGN KEY(ID_personnel_records) REFERENCES personnel_records(ID_personnel_records)
	ON DELETE CASCADE;

ALTER TABLE personnel_records
	ADD CONSTRAINT key4
	FOREIGN KEY(ID_position) REFERENCES position(ID_position)
	ON DELETE CASCADE;


insert into DEPARTMENT values('warehouse worker')
insert into DEPARTMENT values('office employee')
insert into DEPARTMENT values('factory worker')

insert into POSITION values('accountant')
insert into POSITION values('Chief Accountant')
insert into POSITION values('cleaner')
insert into POSITION values('head of department')
insert into POSITION values('driver')

insert into personnel_records values(30, 5000, 0, 13, 1)
insert into personnel_records values(31, 4000, 0, 13, 2)
insert into personnel_records values(40, 2500, 0, 13, 3)
insert into personnel_records values(45, 10000, 0, 13, 4)
insert into personnel_records values(35, 7000, 0, 13, 5)
insert into personnel_records values(20, 6000, 0, 13, 1)
insert into personnel_records values(10, 5000, 0, 13, 2)
insert into personnel_records values(5, 4000, 0, 13, 3)
insert into personnel_records values(4, 15000, 0, 13, 4)
insert into personnel_records values(2, 6000, 0, 13, 5)
insert into personnel_records values(9, 7000, 0, 13, 1)


insert into Employee values('Skopin Hariton', 1, 50,1)
insert into Employee values('Beketov Kasyan', 2, 60,2)
insert into Employee values('Stromilov Guriy', 3, 55,3)
insert into Employee values('Gavrilov Foma', 1, 60,4)
insert into Employee values('Chikunskiy Gektor', 2, 59,5)
insert into Employee values('Vahrameev Prisk', 3, 40,6)
insert into Employee values('Yablochkov Amvrosiy', 1, 45,7)
insert into Employee values('Buzovlev Karl', 2, 43,8)
insert into Employee values('Tolstoy Vonifatiy', 3, 39,9)
insert into Employee values('Aydarov Kuzma', 1, 38,10)
insert into Employee values('Somov Korniliy', 2, 41,11)

insert into child values('Ashitkov Isaiya', 'm', 18, 1)
insert into child values('Sumarokov Ianikit', 'f', 20, 1)
insert into child values('Panin Karp', 'f', 18, 1)
insert into child values('Bychinskiy Ermolay', 'f', 20, 2)
insert into child values('Karyakin Ivan', 'm', 21, 3)
insert into child values('Gurev Afanasiy', 'f', 23, 4)
insert into child values('Abashev Yuriy', 'f', 24, 5)
insert into child values('Anohin Agafodor', 'm', 18, 5)
insert into child values('Evlashev Yulian', 'm', 15, 6)
insert into child values('Rozvadovskiy Nonn', 'm', 16, 7)
insert into child values('Nashhokin Abram', 'f', 19, 8)
insert into child values('Kolomnin Anaklet', 'f', 22, 2)
insert into child values('Kasha Yaropolk', 'm', 24, 2)



1.1

CREATE VIEW Parents as SELECT Name_Employee, name_surname_child FROM Employee
inner join child on child.ID_Employee = Employee.ID_Employee

SELECT * FROM Parents


1.2

SELECT Name_Employee, experience FROM Employee 
inner join personnel_records on personnel_records.ID_personnel_records = Employee.ID_personnel_records
WHERE experience >= 30


1.3

CREATE VIEW DepSalary AS SELECT Name_Employee as FullName, salary as income, Name_Department as Department from Employee 
inner join personnel_records on personnel_records.ID_personnel_records = Employee.ID_personnel_records
inner join DEPARTMENT on DEPARTMENT.ID_Department = Employee.ID_DEPARTMENT


SELECT a.* FROM DepSalary a
WHERE a.income = (SELECT MAX(income) FROM DepSalary b WHERE b.Department = a.Department)


1.4 

SELECT Name_employee, age_Employee FROM Employee a
WHERE EXISTS (SELECT * FROM child WHERE child.ID_Employee = a.ID_Employee AND child.gender = 'f')
AND EXISTS (SELECT * FROM child WHERE child.ID_Employee = a.ID_Employee AND child.gender = 'm')


2.1

-- Створення представлення співробітників, що мають дітей --

CREATE VIEW Having_child as SELECT DISTINCT Name_Employee, Employee.ID_Employee, age_Employee 
FROM Employee  
inner join child on child.ID_Employee = Employee.ID_Employee

select * from Having_child

-- Створення представлення співробітників, їх з/п, оклад та досвід -- 

CREATE VIEW PR as SELECT ID_Employee, Name_Employee, salary, wage, taxes, experience 
FROM personnel_records
inner join Employee on Employee.ID_personnel_records = personnel_records.ID_personnel_records

select * from PR

-- Процедура розраховує з/п для співробітника --

CREATE PROCEDURE Get_wage @id_Emp INT, @tax FLOAT = 0.13, @min_salary INT = 1000 AS
BEGIN 
	declare @Has_child TINYINT

	IF EXISTS (SELECT ID_Employee from Having_child where ID_Employee = @id_Emp)
		begin
			UPDATE PR
				SET wage = salary WHERE PR.ID_Employee = @id_Emp
		end
	else
		begin
			
			UPDATE PR
				SET wage = salary - (SELECT salary * @tax WHERE PR.ID_Employee = @id_Emp)
					WHERE PR.ID_Employee = @id_Emp
		end
	IF (SELECT wage from PR WHERE ID_Employee = @id_Emp) < @min_salary
	BEGIN 
		update PR
			set wage = @min_salary WHERE PR.ID_Employee = @id_Emp
	END

	UPDATE PR
		set taxes = @tax * 100
END


-- Викликаємо процедуру для кожного співробітника --

declare @i INT = 1

while (@i <= (SELECT COUNT(ID_Employee) FROM PR))
begin
	exec Get_wage @i
	set @i = @i + 1
end

SELECT * FROM personnel_records

3.1

CREATE PROCEDURE Change_salary @Id_emp INT, @New_salary INT AS
BEGIN 
	UPDATE PR SET salary = @New_salary WHERE ID_Employee = @Id_emp
END

EXEC Change_salary 1, 10000

SELECT * FROM personnel_records

3.2

CREATE PROCEDURE Change_Dep @Id_emp INT, @New_dep INT AS
BEGIN 
	UPDATE Employee SET ID_DEPARTMENT = @New_dep WHERE ID_Employee = @Id_emp
END

EXEC Change_Dep 1, 3

SELECT * FROM Employee

3.3

CREATE VIEW Emp_pos as SELECT ID_Employee, Name_Employee, personnel_records.ID_Position as Position, Name_Position FROM Employee
inner join personnel_records on personnel_records.ID_personnel_records = Employee.ID_personnel_records
inner join POSITION on POSITION.ID_Position = personnel_records.ID_position

CREATE PROCEDURE Change_Dep @Id_emp INT, @New_pos INT AS
BEGIN 
	UPDATE Emp_pos SET Position = @New_pos WHERE ID_Employee = @Id_emp
END

EXEC Change_Dep 1, 2

SELECT * FROM Emp_pos


4.1

select Name_Employee, age_Employee from Employee 
where ID_Employee not in (SELECT ID_Employee from Having_child) 
order by age_Employee

4.2 

SELECT * FROM PR where id_employee = 5